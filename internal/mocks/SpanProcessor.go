// Code generated by mockery v2.9.6. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	trace "go.opentelemetry.io/otel/sdk/trace"
)

// SpanProcessor is an autogenerated mock type for the SpanProcessor type
type SpanProcessor struct {
	mock.Mock
}

type SpanProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *SpanProcessor) EXPECT() *SpanProcessor_Expecter {
	return &SpanProcessor_Expecter{mock: &_m.Mock}
}

// ForceFlush provides a mock function with given fields: ctx
func (_m *SpanProcessor) ForceFlush(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SpanProcessor_ForceFlush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceFlush'
type SpanProcessor_ForceFlush_Call struct {
	*mock.Call
}

// ForceFlush is a helper method to define mock.On call
//  - ctx context.Context
func (_e *SpanProcessor_Expecter) ForceFlush(ctx interface{}) *SpanProcessor_ForceFlush_Call {
	return &SpanProcessor_ForceFlush_Call{Call: _e.mock.On("ForceFlush", ctx)}
}

func (_c *SpanProcessor_ForceFlush_Call) Run(run func(ctx context.Context)) *SpanProcessor_ForceFlush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SpanProcessor_ForceFlush_Call) Return(_a0 error) *SpanProcessor_ForceFlush_Call {
	_c.Call.Return(_a0)
	return _c
}

// OnEnd provides a mock function with given fields: s
func (_m *SpanProcessor) OnEnd(s trace.ReadOnlySpan) {
	_m.Called(s)
}

// SpanProcessor_OnEnd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnEnd'
type SpanProcessor_OnEnd_Call struct {
	*mock.Call
}

// OnEnd is a helper method to define mock.On call
//  - s trace.ReadOnlySpan
func (_e *SpanProcessor_Expecter) OnEnd(s interface{}) *SpanProcessor_OnEnd_Call {
	return &SpanProcessor_OnEnd_Call{Call: _e.mock.On("OnEnd", s)}
}

func (_c *SpanProcessor_OnEnd_Call) Run(run func(s trace.ReadOnlySpan)) *SpanProcessor_OnEnd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(trace.ReadOnlySpan))
	})
	return _c
}

func (_c *SpanProcessor_OnEnd_Call) Return() *SpanProcessor_OnEnd_Call {
	_c.Call.Return()
	return _c
}

// OnStart provides a mock function with given fields: parent, s
func (_m *SpanProcessor) OnStart(parent context.Context, s trace.ReadWriteSpan) {
	_m.Called(parent, s)
}

// SpanProcessor_OnStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnStart'
type SpanProcessor_OnStart_Call struct {
	*mock.Call
}

// OnStart is a helper method to define mock.On call
//  - parent context.Context
//  - s trace.ReadWriteSpan
func (_e *SpanProcessor_Expecter) OnStart(parent interface{}, s interface{}) *SpanProcessor_OnStart_Call {
	return &SpanProcessor_OnStart_Call{Call: _e.mock.On("OnStart", parent, s)}
}

func (_c *SpanProcessor_OnStart_Call) Run(run func(parent context.Context, s trace.ReadWriteSpan)) *SpanProcessor_OnStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(trace.ReadWriteSpan))
	})
	return _c
}

func (_c *SpanProcessor_OnStart_Call) Return() *SpanProcessor_OnStart_Call {
	_c.Call.Return()
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *SpanProcessor) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SpanProcessor_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type SpanProcessor_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//  - ctx context.Context
func (_e *SpanProcessor_Expecter) Shutdown(ctx interface{}) *SpanProcessor_Shutdown_Call {
	return &SpanProcessor_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *SpanProcessor_Shutdown_Call) Run(run func(ctx context.Context)) *SpanProcessor_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SpanProcessor_Shutdown_Call) Return(_a0 error) *SpanProcessor_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSpanProcessor interface {
	mock.TestingT
	Cleanup(func())
}

// NewSpanProcessor creates a new instance of SpanProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSpanProcessor(t mockConstructorTestingTNewSpanProcessor) *SpanProcessor {
	mock := &SpanProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
